@page
@model Y2S2_AppSecPracAssignment.Pages.RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h2>@ViewData["Title"]</h2>

<form method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken() <!-- CSRF Protection -->

    <div class="form-group">
        <label asp-for="RegisterViewModel.FirstName" class="control-label"></label>
        <input asp-for="RegisterViewModel.FirstName" class="form-control" />
        <span asp-validation-for="RegisterViewModel.FirstName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.LastName" class="control-label"></label>
        <input asp-for="RegisterViewModel.LastName" class="form-control" />
        <span asp-validation-for="RegisterViewModel.LastName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.Gender" class="control-label"></label>
        <select asp-for="RegisterViewModel.Gender" class="form-control">
            <option value="">-- Select Gender --</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
        </select>
        <span asp-validation-for="RegisterViewModel.Gender" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.NRIC" class="control-label"></label>
        <input asp-for="RegisterViewModel.NRIC" class="form-control" />
        <span asp-validation-for="RegisterViewModel.NRIC" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.Email" class="control-label"></label>
        <input asp-for="RegisterViewModel.Email" class="form-control" />
        <span asp-validation-for="RegisterViewModel.Email" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.DateOfBirth" class="control-label"></label>
        <input asp-for="RegisterViewModel.DateOfBirth" type="date" class="form-control" max="@DateTime.Now.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="RegisterViewModel.DateOfBirth" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.Password" class="control-label"></label>
        <div class="input-group">
            <input asp-for="RegisterViewModel.Password" type="password" class="form-control" id="password" />
            <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('password', 'togglePasswordIcon')">
                <img id="togglePasswordIcon" src="/images/hide.png" width="20px" />
            </button>
        </div>
        <span asp-validation-for="RegisterViewModel.Password" class="text-danger"></span>
    </div>
        <div id="password-strength-meter" class="progress mt-2">
        <div id="strength-bar" class="progress-bar" role="progressbar" style="width: 0%;"></div>
        </div>
        <p id="strength-text" class="text-danger">Extremely Weak Password</p>

        <div id="password-strength" class="mt-2">
            <p class="mb-1">Password must meet the following requirements:</p>
            <ul class="list-unstyled">
                <li id="length" class="text-danger">Minimum 12 characters</li>
                <li id="lowercase" class="text-danger">At least one lowercase letter</li>
                <li id="uppercase" class="text-danger">At least one uppercase letter</li>
                <li id="symbol" class="text-danger">At least one symbol</li>
                <li id="number" class="text-danger">At least one number</li>

            </ul>
        </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.ConfirmPassword" class="control-label"></label>
        <div class="input-group">
            <input asp-for="RegisterViewModel.ConfirmPassword" type="password" class="form-control" id="confirmPassword" />
            <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('confirmPassword', 'toggleConfirmPasswordIcon')">
                <img id="toggleConfirmPasswordIcon" src="/images/hide.png" width="20px" />
            </button>
        </div>
        <span asp-validation-for="RegisterViewModel.ConfirmPassword" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.Resume" class="control-label"></label>
        <input asp-for="RegisterViewModel.Resume" type="file" class="form-control" accept=".pdf, .docx" />
        <span asp-validation-for="RegisterViewModel.Resume" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RegisterViewModel.WhoAmI" class="control-label"></label>
        <input asp-for="RegisterViewModel.WhoAmI" class="form-control" />
        <span asp-validation-for="RegisterViewModel.WhoAmI" class="text-danger"></span>
    </div>


<input type="hidden" id="recaptcha-token" name="RegisterViewModel.RecaptchaToken" />

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Register</button>
    </div>
</form>

<div>
    <a href="/Login">Already have an account? Login here.</a>
</div>

<div class="form-group mt-3">
    <form method="post" asp-page-handler="ClearDatabase">
        <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to clear the database? This action cannot be undone.')">
            Clear Database
        </button>
    </form>
</div>
<script src="https://www.google.com/recaptcha/api.js?render=6Lf93c0qAAAAANCiAFzTrvhfjPF4xdlF16OPLxp7"></script>

<script>
    grecaptcha.ready(function () {
        grecaptcha.execute('6Lf93c0qAAAAANCiAFzTrvhfjPF4xdlF16OPLxp7', { action: 'register' }).then(function (token) {
            document.getElementById('recaptcha-token').value = token;
            console.log(document.getElementById('recaptcha-token').value);

        });
    });

    
    function togglePassword(inputId, iconId) {
        const inputField = document.getElementById(inputId);
        const icon = document.getElementById(iconId);

        if (inputField.type === "password") {
            inputField.type = "text";
            icon.src = "/images/show.png";
        } else {
            inputField.type = "password";
            icon.src = "/images/hide.png";
        }
    }
    document.getElementById('password').addEventListener('input', function () {
        const password = this.value;
        const lengthRequirement = document.getElementById('length');
        const lowercaseRequirement = document.getElementById('lowercase');
        const uppercaseRequirement = document.getElementById('uppercase');
        const symbolRequirement = document.getElementById('symbol');
        const numberRequirement = document.getElementById('number');
        const strengthBar = document.getElementById('strength-bar');
        const strengthText = document.getElementById('strength-text');

        let score = 0;

        // Check minimum length (12 characters)
        if (password.length >= 12) {
            lengthRequirement.classList.remove('text-danger');
            lengthRequirement.classList.add('text-success');
            score++;
        } else {
            lengthRequirement.classList.remove('text-success');
            lengthRequirement.classList.add('text-danger');
        }

        // Check for lowercase letter
        if (/[a-z]/.test(password)) {
            lowercaseRequirement.classList.remove('text-danger');
            lowercaseRequirement.classList.add('text-success');
            score++;
        } else {
            lowercaseRequirement.classList.remove('text-success');
            lowercaseRequirement.classList.add('text-danger');
        }

        // Check for uppercase letter
        if (/[A-Z]/.test(password)) {
            uppercaseRequirement.classList.remove('text-danger');
            uppercaseRequirement.classList.add('text-success');
            score++;
        } else {
            uppercaseRequirement.classList.remove('text-success');
            uppercaseRequirement.classList.add('text-danger');
        }

        // Check for symbol
        if (/[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
            symbolRequirement.classList.remove('text-danger');
            symbolRequirement.classList.add('text-success');
            score++;
        } else {
            symbolRequirement.classList.remove('text-success');
            symbolRequirement.classList.add('text-danger');
        }

        // Check for number
        if (/\d/.test(password)) {
            numberRequirement.classList.remove('text-danger');
            numberRequirement.classList.add('text-success');
            score++;
        } else {
            numberRequirement.classList.remove('text-success');
            numberRequirement.classList.add('text-danger');
        }

        // Update strength bar
        const strengthLevels = ["Extremely Weak Password", "Weak Password", "Moderate Password", "Strong Password", "Extremely Strong Password"];
        const colors = ["#dc3545", "#dc3545", "#ffc107", "#ffc107", "#28a745"];

        const percentage = (score / 5) * 100;
        strengthBar.style.width = percentage + "%";
        strengthBar.style.backgroundColor = colors[score - 1] || "#dc3545";
        strengthText.innerText = strengthLevels[score - 1] || "Extremely Weak Password";
        strengthText.className = score > 3 ? "text-success" : score > 1 ? "text-warning" : "text-danger";


        
    });
</script>